{"version":3,"sources":["actions/userAction.js","constants/index.js","components/Friend/index.js","components/FriendList/index.js","components/UserPage/index.js","containers/EntranceController/index.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["VK","window","loginUser","dispatch","type","Auth","login","r","session","username","user","first_name","payload","localStorage","setItem","error","Error","logoutUser","logout","removeItem","getFriendsFromVK","count","Api","call","fields","v","friendItems","response","items","Friend","last_name","className","FriendList","friendList","map","key","id","defaultProps","UserPage","this","props","name","storageName","isLoading","onClick","Component","EntranceController","loginUserConnect","logoutUserConnect","getFriendsFromVKConnect","getStorageName","getItem","connect","state","bindActionCreators","App","Boolean","location","hostname","match","initialState","store","createStore","action","message","compose","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.789e1842.chunk.js","sourcesContent":["import {\r\n  LOGIN_REQUEST,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_USER,\r\n  GET_FRIENDS_SUCCESS, GET_FRIENDS_ERROR, GET_FRIENDS_REQUEST,\r\n} from '../constants';\r\n\r\nconst { VK } = window;\r\n\r\n// Вход\r\nexport const loginUser = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGIN_REQUEST,\r\n  });\r\n  VK.Auth.login((r) => {\r\n    if (r.session) {\r\n      const username = r.session.user.first_name;\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: username,\r\n      });\r\n      localStorage.setItem('name', username);\r\n    } else {\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n        error: true,\r\n        payload: new Error('Ошибка авторизации'),\r\n      });\r\n    }\r\n  }, 4);\r\n};\r\n\r\n// Выход\r\nexport const logoutUser = () => (dispatch) => {\r\n  dispatch({\r\n    type: LOGOUT_USER,\r\n  });\r\n  VK.Auth.logout();\r\n  localStorage.removeItem('name');\r\n};\r\n\r\n// Получение друзей\r\nexport const getFriendsFromVK = (count) => (dispatch) => {\r\n  dispatch({\r\n    type: GET_FRIENDS_REQUEST,\r\n  });\r\n  VK.Api.call('friends.get', { fields: 'username', count, v: '5.80' }, (r) => {\r\n    const friendItems = r.response.items;\r\n    if (!r.error) {\r\n      dispatch({\r\n        type: GET_FRIENDS_SUCCESS,\r\n        payload: friendItems,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: GET_FRIENDS_ERROR,\r\n        payload: new Error('Ошибка при получении списка друзей'),\r\n      });\r\n    }\r\n  });\r\n};\r\n","// логин и выход\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\n\r\n// получение друзей\r\nexport const GET_FRIENDS_REQUEST = 'GET_FRIENDS_REQUEST';\r\nexport const GET_FRIENDS_SUCCESS = 'GET_FRIENDS_SUCCESS';\r\nexport const GET_FRIENDS_ERROR = 'GET_FRIENDS_ERROR';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './styles.css';\r\n\r\nconst Friend = ({\r\n  first_name, last_name,\r\n}) => (\r\n  <h2 className=\"page-name\">{`${first_name} ${last_name}`}</h2>\r\n);\r\n\r\nexport default Friend;\r\n\r\nFriend.propTypes = {\r\n  first_name: PropTypes.string.isRequired,\r\n  last_name: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Friend from '../Friend';\r\n\r\nimport './styles.css';\r\n\r\nconst FriendList = ({ friendList }) => (\r\n  <>\r\n    <h1 className=\"title\">Список друзей</h1>\r\n    <ul className=\"list-friends\">\r\n      {friendList.map((user) => (\r\n        <li\r\n          className=\"list-friends-item\"\r\n          key={user.id}\r\n        >\r\n          <Friend\r\n            id={user.id}\r\n            first_name={user.first_name}\r\n            last_name={user.last_name}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </>\r\n);\r\nexport default FriendList;\r\n\r\nFriendList.propTypes = {\r\n  friendList: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nFriendList.defaultProps = {\r\n  friendList: [],\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FriendList from '../FriendList';\r\n\r\nimport './styles.css';\r\n\r\nexport default class UserPage extends Component {\r\n  componentDidMount() {\r\n    const { getFriendsFromVK } = this.props;\r\n    // Количество друзей, которых необходимо вывести\r\n    const friendsCount = 5;\r\n    getFriendsFromVK(friendsCount);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      name, storageName, logoutUser, friendList, isLoading,\r\n    } = this.props;\r\n    return (\r\n      <section className=\"user-page\">\r\n        <div className=\"wrapped-user-info\">\r\n          <div className=\"user-info\">\r\n            <h2>\r\n            Привет, {name || storageName }!\r\n            </h2>\r\n            {storageName !== null ? (\r\n              <button className=\"btn-logout\" type=\"button\" onClick={logoutUser}>\r\n                Выход\r\n                <i className=\"fas fa-sign-out-alt\" />\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        {isLoading\r\n          ? <p>Загрузка...</p>\r\n          : <FriendList friendList={friendList} />}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nUserPage.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  storageName: PropTypes.string,\r\n  getFriendsFromVK: PropTypes.func,\r\n  logoutUser: PropTypes.func.isRequired,\r\n  friendList: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nUserPage.defaultProps = {\r\n  getFriendsFromVK: () => {},\r\n  storageName: '',\r\n  friendList: [],\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { loginUser, logoutUser, getFriendsFromVK } from '../../actions/userAction';\r\nimport UserPage from '../../components/UserPage';\r\n\r\nimport './styles.css';\r\n\r\nconst EntranceController = ({\r\n  user, loginUserConnect, logoutUserConnect, getFriendsFromVKConnect, friendList, isLoading,\r\n}) => {\r\n  const getStorageName = localStorage.getItem('name');\r\n  if (user || getStorageName) {\r\n    return (\r\n      <UserPage\r\n        isLoading={isLoading}\r\n        name={user}\r\n        storageName={getStorageName}\r\n        logoutUser={logoutUserConnect}\r\n        friendList={friendList}\r\n        getFriendsFromVK={getFriendsFromVKConnect}\r\n      />\r\n    );\r\n  } return (\r\n    <div className=\"btn-wrapped\">\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-login\"\r\n        onClick={loginUserConnect}\r\n      >\r\n        <span><i className=\"fab fa-vk\" /></span>\r\n            Войти\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.name,\r\n  friendList: state.friendList,\r\n  isLoading: state.isLoading,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\r\n  loginUserConnect: loginUser,\r\n  logoutUserConnect: logoutUser,\r\n  getFriendsFromVKConnect: getFriendsFromVK,\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EntranceController);\r\n\r\nEntranceController.propTypes = {\r\n  user: PropTypes.string,\r\n  loginUserConnect: PropTypes.func.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  logoutUserConnect: PropTypes.func.isRequired,\r\n  getFriendsFromVKConnect: PropTypes.func,\r\n  friendList: PropTypes.arrayOf(PropTypes.any),\r\n};\r\n\r\nEntranceController.defaultProps = {\r\n  user: '',\r\n  getFriendsFromVKConnect: () => {},\r\n  friendList: [],\r\n};\r\n","import React from 'react';\nimport './App.css';\n\nimport EntranceController from './containers/EntranceController';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EntranceController />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_USER,\n  GET_FRIENDS_SUCCESS,\n  GET_FRIENDS_REQUEST,\n  GET_FRIENDS_ERROR,\n} from '../constants';\n\nconst initialState = {\n  name: '',\n  error: '',\n  friendList: [],\n  isLoading: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      return { ...state, error: '' };\n\n    case LOGIN_SUCCESS:\n      return { ...state, name: action.payload };\n\n    case LOGIN_FAIL:\n      return { ...state, error: action.payload.message };\n\n    case LOGOUT_USER:\n      return {\n        ...state, error: '', name: action.payload,\n      };\n\n    case GET_FRIENDS_REQUEST:\n      return { ...state, isLoading: true };\n\n    case GET_FRIENDS_SUCCESS:\n      return {\n        ...state, isLoading: false, friendList: action.payload,\n      };\n\n    case GET_FRIENDS_ERROR:\n      return { ...state, isLoading: false, error: action.payload.message };\n\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(reducers,\r\n  compose(applyMiddleware(thunk, logger)));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}